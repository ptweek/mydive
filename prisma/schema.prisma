// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

// Suggested by turso
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum ScheduledJumpStatus {
  CONFIRMED
  CANCELED
  COMPLETED
}

enum WaitlistStatus {
  OPENED
  CLOSED
  CONFIRMED // this means that the booking is confirmed by the Admin
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model BookingWindow {
    id Int @id @default(autoincrement())
    status BookingStatus @default(PENDING)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    bookingZone String
    numJumpers Int
    windowStartDate DateTime // End date is always 3 days afterwards
    windowEndDate DateTime
    idealizedJumpDate DateTime

    bookedBy String

    waitlists Waitlist[]
    scheduledJumpDates ScheduledJump[]
    
    @@index([bookedBy])
}

enum SchedulingMethod {
  BOOKING_WINDOW
  WAITLIST
}

model ScheduledJump {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status BookingStatus @default(CONFIRMED)

    jumpDate DateTime // End date is always 3 days afterwards
    bookingZone String
    numJumpers Int
    schedulingMethod SchedulingMethod // how the jump day got booked, if waitlist should have waitlist id

    associatedBooking BookingWindow @relation(fields: [associatedBookingId], references: [id])
    associatedBookingId Int

    associatedWaitlist Waitlist? @relation(fields: [associatedWaitlistId], references: [id]) 
    associatedWaitlistId Int? 

    bookedBy String // jumperId
    confirmedBy String // adminId

    // Add canceled by?

    @@index([jumpDate])
}

model Waitlist {
  id                  Int             @id @default(autoincrement())
  status WaitlistStatus @default(OPENED)
  day                 DateTime   
  entries             WaitlistEntry[]

  associatedBooking   BookingWindow         @relation(fields: [associatedBookingId], references: [id])
  associatedBookingId Int     

  associatedScheduledJumps ScheduledJump[] // note: there should only be ONE active scheduled jump
  
  @@unique([day]) // Keep this - one waitlist per day globally
}

model WaitlistEntry {
  id         Int      @id @default(autoincrement())
  
  status BookingStatus @default(PENDING) // when we confirm a waitlist booking, we should confirm this and cancel all the others. 
  waitlistId Int
  waitlistedUserId     String   // clerkId of waitlisted user
  position   Int      // Order in the waitlist
  createdAt  DateTime @default(now())
  
  waitlist   Waitlist @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@unique([waitlistId, position]) // Ensure no duplicate positions
  @@unique([waitlistId, waitlistedUserId])   // Ensure user can't be on same waitlist twice
}
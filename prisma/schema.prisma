generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// best lifecycle -> PENDING_DEPOSIT -> UNSCHEDULED -> SCHEDULED -> COMPLETED
enum BookingStatus {
  PENDING_DEPOSIT
  UNSCHEDULED
  SCHEDULED
  COMPLETED
  CANCELED
}

enum WaitlistStatus {
  OPEN
  CLOSED
  CONFIRMED
}

enum WaitlistEntryStatus {
  WAITING
  SCHEDULED
  CANCELED
}

enum SchedulingMethod {
  BOOKING_WINDOW
  WAITLIST
}

enum ScheduledJumpStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

enum BookingZone {
  DEFAULT
  MAMMOTH_LAKES
}


model BookingWindow {
  id                 Int             @id @default(autoincrement())
  status             BookingStatus   @default(PENDING_DEPOSIT)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  bookingZone        BookingZone
  numJumpers         Int
  windowStartDate    DateTime
  windowEndDate      DateTime
  idealizedJumpDate  DateTime
  depositPaid        Boolean?
  depositPaidAt      DateTime?
  cancellationReason String?
  bookedBy           String
  scheduledJumpDates ScheduledJump[]
  waitlists          Waitlist[]

  @@index([bookedBy])
}

model ScheduledJump {
  id                   Int                 @id @default(autoincrement())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  status               ScheduledJumpStatus @default(SCHEDULED)
  jumpDate             DateTime
  bookingZone          BookingZone
  numJumpers           Int
  schedulingMethod     SchedulingMethod
  associatedBookingId  Int
  associatedWaitlistId Int?
  bookedBy             String
  confirmedBy          String
  associatedWaitlist   Waitlist?           @relation(fields: [associatedWaitlistId], references: [id])
  associatedBooking    BookingWindow       @relation(fields: [associatedBookingId], references: [id])

  @@index([jumpDate])
}

model Waitlist {
  id                       Int             @id @default(autoincrement())
  status                   WaitlistStatus  @default(OPEN)
  day                      DateTime        @unique
  associatedBookingId      Int
  associatedScheduledJumps ScheduledJump[]
  associatedBooking        BookingWindow   @relation(fields: [associatedBookingId], references: [id])
  entries                  WaitlistEntry[]
}

model WaitlistEntry {
  id               Int                 @id @default(autoincrement())
  status           WaitlistEntryStatus @default(WAITING)
  waitlistId       Int
  waitlistedUserId String
  latestPosition   Int
  activePosition   Int?
  createdAt        DateTime            @default(now())
  waitlist         Waitlist            @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@unique([waitlistId, activePosition])
}

